# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CensoSegmento
                                 A QGIS plugin
 Censo Segmento
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-09-15
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Maximiliano Monti
        email                : renzomiguelmonti@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QVersionNumber, QCoreApplication, Qt, QObject, pyqtSignal
from qgis.PyQt.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QDialog, QFormLayout, QInputDialog
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .censo_segmento_dialog import CensoSegmentoDialog
import os.path


class CensoSegmento:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CensoSegmento_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Censo Segmento')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CensoSegmento', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/censo_segmento/icon.png'
        current_dir = os.path.dirname(os.path.realpath(__file__))
        poll_icon_path = os.path.join(current_dir,'icons/poll.png')
        self.add_action(
            poll_icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Censo Segmento'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = CensoSegmentoDialog()
            # Events
            self.dlg.buttonRadio.clicked.connect(self.runRadio)
            self.dlg.buttonSegmentacion.clicked.connect(self.runSegmentacion)   

        # show the dialog
        self.dlg.show()




    def runRadio(self):
        #Añadiendo capas PostGIS
        uri = QgsDataSourceUri()
        # introducimos nombre del servidor, puerto, nombre de la base de datos, usuario y contraseña
        uri.setConnection("172.26.68.174", "5432", "seg", "vhere", "vero_1234")


        origen = QInputDialog.getText(None, 'origen', 'Introduce la ruta de acceso')
        aglomerado = QInputDialog.getText(None, 'aglomerado', 'Introduce el nombre completo del aglomerado')

          

        # Agrego la capa  Segmento
        uri.setDataSource(aglomerado[0], "arc" , "wkb_geometry" )
        layer = QgsVectorLayer(uri.uri(), "segmentos", "postgres")
        if not layer.isValid():
            print ("el numero de aglomerado no es correcto")
        QgsProject.instance().addMapLayer(layer)
        renderer = layer.renderer()
        layer.loadNamedStyle(origen[0] + '\estilo_radio\segmentos.qml')
        self.iface.mapCanvas().refresh() 
        QgsProject.instance().mapLayers().values()
        layer.triggerRepaint()


        # Agrego la capa  Mascara desde BD
        #uri.setDataSource(aglomerado[0] , "radios" , "wkb_geometry" )
        #layer = QgsVectorLayer(uri.uri(), "mascara", "postgres")
        #if not layer.isValid():
        #    print ("no existe capa radio")
        #QgsProject.instance().addMapLayer(layer)
        #renderer = layer.renderer()
        #layer.loadNamedStyle(origen[0] +'\estilo_radio\mascara.qml')
        #iface.mapCanvas().refresh() 
        #QgsProject.instance().mapLayers().values()
        #layer.triggerRepaint()


        # Agrego la capa  MASCARA RADIOS desde carpeta censo2020
        capa = origen[0]+'\humahuaca\pradio' + '.shp'
        nomcapa = 'mascara' 
        #print capa
         ##carga la capa
        layer = QgsVectorLayer(capa,nomcapa,'ogr')
        if not layer.isValid():
            print ("la capa no es correcta")
        QgsProject.instance().addMapLayer(layer)
        renderer = layer.renderer()
        layer.loadNamedStyle(r''+origen[0]+'\estilo_radio\mascara.qml')
        iface.mapCanvas().refresh() 
        QgsProject.instance().mapLayers().values()
        layer.triggerRepaint()


        # Agrego la capa  Especiales
        uri.setDataSource(aglomerado[0], "arc" , "wkb_geometry" )
        layer = QgsVectorLayer(uri.uri(), "especiales", "postgres")
        if not layer.isValid():
            print ("el numero de aglomerado no es correcto")
        QgsProject.instance().addMapLayer(layer)
        renderer = layer.renderer()
        layer.loadNamedStyle(origen[0] + '\estilo_radio\especiales.qml')
        iface.mapCanvas().refresh() 
        QgsProject.instance().mapLayers().values()
        layer.triggerRepaint()

        # Agrego la capa  Radios desde BD
        #uri.setDataSource(aglomerado[0] , "radios" , "wkb_geometry" )
        #layer = QgsVectorLayer(uri.uri(), "radios", "postgres")
        #if not layer.isValid():
        #    print ("no existe capa radio")
        #QgsProject.instance().addMapLayer(layer)
        #renderer = layer.renderer()
        #layer.loadNamedStyle(origen[0] +'\estilo_radio\radio.qml')
        ##iface.mapCanvas().refresh() 
        #QgsProject.instance().mapLayers().values()
        #layer.triggerRepaint()


        # Agrego la capa  RADIOS desde carpeta censo2020
        capa = origen[0]+'\humahuaca\pradio' + '.shp'
        nomcapa = 'radios' 
        #print capa
         ##carga la capa
        layer = QgsVectorLayer(capa,nomcapa,'ogr')
        if not layer.isValid():
            print ("la capa no es correcta")
        QgsProject.instance().addMapLayer(layer)
        renderer = layer.renderer()
        layer.loadNamedStyle(origen[0]+'\estilo_radio\pradio.qml')
        iface.mapCanvas().refresh() 
        QgsProject.instance().mapLayers().values()
        layer.triggerRepaint() 

        # Agrego la capa Etiquetas Manzanas  
        uri.setDataSource(aglomerado[0] , "lab" , "wkb_geometry" )
        layer = QgsVectorLayer(uri.uri(), "etiqueta_manzana", "postgres")
        if not layer.isValid():
            print ("el numero de aglomerado no es correcto")
        QgsProject.instance().addMapLayer(layer)
        renderer = layer.renderer()
        layer.loadNamedStyle(origen[0] +'\estilo_radio\manzanas.qml')
        iface.mapCanvas().refresh() 
        QgsProject.instance().mapLayers().values()
        layer.triggerRepaint() 

        # Agrego las tablas desde la carpeta censo2020

        # Agrego tabla provincia
        capa = origen[0] + '\datos_prov\provincia.csv'
        nomcapa = 'provincia'  
        #print capa
         ##carga la capa
        layer = QgsVectorLayer(capa,nomcapa,'ogr')
        if not layer.isValid():
            print ("la capa no es correcta")
        QgsProject.instance().addMapLayer(layer)
        renderer = layer.renderer()

        # Agrego tabla departamento
        capa = (origen[0] + '\datos_prov\departamentos.csv')
        nomcapa = 'departamento'  
        #print capa
         ##carga la capa
        layer = QgsVectorLayer(capa,nomcapa,'ogr')
        if not layer.isValid():
            print ("la capa no es correcta")
        QgsProject.instance().addMapLayer(layer)
        renderer = layer.renderer()

        # Agrego tabla localidad
        capa = (origen[0] + '\datos_prov\localidad.csv')
        nomcapa = 'localidad'  
        #print capa
         ##carga la capa
        layer = QgsVectorLayer(capa,nomcapa,'ogr')
        if not layer.isValid():
            print ("la capa no es correcta")
        QgsProject.instance().addMapLayer(layer)
        renderer = layer.renderer()


    def runSegmentacion(self):
        usuario = QInputDialog.getText(None, 'usuario', 'Introduce su nombre usuario')

        #Añadiendo capas PostGIS
        uri = QgsDataSourceUri()
         
        # introducimos nombre del servidor, puerto, nombre de la base de datos, usuario y contraseña
        uri.setConnection("172.26.68.174", "5432", "seg", usuario[0], "vero_1234")


        origen = QInputDialog.getText(None, 'origen', 'Introduce la ruta de acceso')
        aglomerado = QInputDialog.getText(None, 'aglomerado', 'Introduce el nombre completo del aglomerado')

         # Agrego la capa  SEGMENTOS 
         
        uri.setDataSource(aglomerado[0], "arc" , "wkb_geometry" )
        layer = QgsVectorLayer(uri.uri(), "segmentos", "postgres")
        if not layer.isValid():
            print ("el numero de aglomerado no es correcto")
        QgsProject.instance().addMapLayer(layer)
        renderer = layer.renderer()
        layer.loadNamedStyle(origen[0] + '\estilo_segmento\segmento.qml')
        iface.mapCanvas().refresh() 
        QgsProject.instance().mapLayers().values()
        layer.triggerRepaint()

        # Agrego la capa  mascara
        uri.setDataSource(aglomerado[0] , "radios" , "wkb_geometry" )
        layer = QgsVectorLayer(uri.uri(), "mascara", "postgres")
        if not layer.isValid():
            print ("no existe capa radio")
        QgsProject.instance().addMapLayer(layer)
        renderer = layer.renderer()
        layer.loadNamedStyle(origen[0] +'\estilo_segmento\mascara.qml')
        iface.mapCanvas().refresh() 
        QgsProject.instance().mapLayers().values()
        layer.triggerRepaint()

        # Agrego la capa  ESPECIALES
        uri.setDataSource(aglomerado[0], "arc" , "wkb_geometry" )
        layer = QgsVectorLayer(uri.uri(), "especiales", "postgres")
        if not layer.isValid():
            print ("el numero de aglomerado no es correcto")
        QgsProject.instance().addMapLayer(layer)
        renderer = layer.renderer()
        layer.loadNamedStyle(origen[0] + '\estilo_segmento\especiales.qml')
        iface.mapCanvas().refresh() 
        QgsProject.instance().mapLayers().values()
        layer.triggerRepaint()

        # Agrego la capa  RADIOS 
        uri.setDataSource(aglomerado[0] , "radios" , "wkb_geometry" )
        layer = QgsVectorLayer(uri.uri(), "radios", "postgres")
        if not layer.isValid():
            print ("no existe capa radio")
        QgsProject.instance().addMapLayer(layer)
        renderer = layer.renderer()
        layer.loadNamedStyle(origen[0] +'\estilo_segmento\radio.qml')
        iface.mapCanvas().refresh() 
        QgsProject.instance().mapLayers().values()
        layer.triggerRepaint()

        # Agrego la capa  ETIQUETAS  MANZANA  
        uri.setDataSource(aglomerado[0] , "lab" , "wkb_geometry" )
        layer = QgsVectorLayer(uri.uri(), "etiqueta_manzana", "postgres")
        if not layer.isValid():
            print ("el numero de aglomerado no es correcto")
        QgsProject.instance().addMapLayer(layer)
        renderer = layer.renderer()
        layer.loadNamedStyle(origen[0] +'\estilo_segmento\manzana.qml')
        iface.mapCanvas().refresh() 
        QgsProject.instance().mapLayers().values()
        layer.triggerRepaint()
